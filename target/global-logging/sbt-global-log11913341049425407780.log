[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\viet\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\viet\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.8 (Oracle Corporation Java 11.0.20)
[debug]       Load.loadUnit: plugins took 210.2931ms
[debug]       Load.loadUnit: defsScala took 0.4902ms
[debug] [Loading] Scanning directory C:\Users\viet\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\viet\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 31.398899 ms
[debug]           Load.resolveProject(global-plugins) took 100.075901ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\viet\.sbt\1.0\plugins, plugins: List(<none>))) took 178.5992ms
[debug] [Loading] Done in C:\Users\viet\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 218.2289ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.5572ms
[debug]     Load.loadUnit(file:/C:/Users/viet/.sbt/1.0/plugins/, ...) took 444.7851ms
[debug]   Load.apply: load took 752.4352ms
[debug]   Load.apply: resolveProjects took 11.095199ms
[debug]   Load.apply: finalTransforms took 120.64ms
[debug]   Load.apply: config.delegates took 14.6911ms
[debug]   Load.apply: Def.make(settings)... took 1024.6871ms
[debug]   Load.apply: structureIndex took 259.7322ms
[debug]   Load.apply: mkStreams took 2.696301ms
[info] loading global plugins from C:\Users\viet\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4906.673ms
[debug]           Load.loadUnit: plugins took 74.423101ms
[debug]           Load.loadUnit: defsScala took 0.005999ms
[debug] [Loading] Scanning directory F:\project_spark\SparkETLBVH\project
[debug]             Load.loadUnit: mkEval took 16.3425ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in F:\project_spark\SparkETLBVH\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 6.1094 ms
[info] loading settings for project sparketlbvh-build from idea1.sbt ...
[debug]               Load.resolveProject(sparketlbvh-build) took 12.746699ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sparketlbvh-build, base: F:\project_spark\SparkETLBVH\project, plugins: List(<none>))) took 23.9595ms
[debug] [Loading] Done in F:\project_spark\SparkETLBVH\project, returning: (sparketlbvh-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 6756.0213ms
[debug]           Load.loadUnit: cleanEvalClasses took 13.2054ms
[debug]         Load.loadUnit(file:/F:/project_spark/SparkETLBVH/project/, ...) took 6844.7863ms
[debug]       Load.apply: load took 6846.8325ms
[debug]       Load.apply: resolveProjects took 0.173599ms
[debug]       Load.apply: finalTransforms took 105.5028ms
[debug]       Load.apply: config.delegates took 8.9705ms
[debug]       Load.apply: Def.make(settings)... took 456.7542ms
[debug]       Load.apply: structureIndex took 83.836ms
[debug]       Load.apply: mkStreams took 0.004299ms
[info] loading project definition from F:\project_spark\SparkETLBVH\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 11170.1526ms
[debug]     Load.loadUnit: defsScala took 0.006699ms
[debug] [Loading] Scanning directory F:\project_spark\SparkETLBVH
[debug]       Load.loadUnit: mkEval took 0.4441ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 5.8108 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 61.7344ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: F:\project_spark\SparkETLBVH, plugins: List(<none>))) took 71.7446ms
[debug] [Loading] Done in F:\project_spark\SparkETLBVH, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4747.7862ms
[debug]     Load.loadUnit: cleanEvalClasses took 17.9793ms
[debug]   Load.loadUnit(file:/F:/project_spark/SparkETLBVH/, ...) took 15937.572901ms
[debug] Load.apply: load took 15939.7603ms
[debug] Load.apply: resolveProjects took 0.271ms
[debug] Load.apply: finalTransforms took 51.153901ms
[debug] Load.apply: config.delegates took 0.5672ms
[debug] Load.apply: Def.make(settings)... took 204.618ms
[debug] Load.apply: structureIndex took 55.712ms
[debug] Load.apply: mkStreams took 0.0038ms
[info] set current project to SparkETLBVH (in build file:/F:/project_spark/SparkETLBVH/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49813 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49813, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SparkETLBVH (in build file:/F:/project_spark/SparkETLBVH/)
[debug] > Exec(idea-shell, None, None)
